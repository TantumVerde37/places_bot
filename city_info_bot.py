import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters, ConversationHandler
from mock_yandex_api import MockYandexAPI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
WAITING_FOR_CITY = 1
WAITING_FOR_CITY_WEATHER = 2
WAITING_FOR_CITY_TRANSPORT = 3
WAITING_FOR_CITY_SIGHTS = 4
WAITING_FOR_CITY_HISTORY = 5
WAITING_FOR_CITY_EVENTS = 6

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API
yandex_api = MockYandexAPI()

# –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_base_keyboard():
    keyboard = [
        [KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")],
        [KeyboardButton("üîç –ù–∞–π—Ç–∏ –≥–æ—Ä–æ–¥"), KeyboardButton("üå§ –ü–æ–≥–æ–¥–∞ –∏ –≤—Ä–µ–º—è")],
        [KeyboardButton("üöá –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"), KeyboardButton("üèõ –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")],
        [KeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è –≥–æ—Ä–æ–¥–∞"), KeyboardButton("üé≠ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ—Ä–æ–¥–∞—Ö.\n'
        '–ù–∞–∂–º–∏—Ç–µ "üîç –ù–∞–π—Ç–∏ –≥–æ—Ä–æ–¥" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ—Ä–æ–¥–µ.',
        reply_markup=get_base_keyboard()
    )
    return ConversationHandler.END

async def handle_button_press(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return await start(update, context)
    elif text == "üîç –ù–∞–π—Ç–∏ –≥–æ—Ä–æ–¥":
        return await info_command(update, context)
    elif text == "üå§ –ü–æ–≥–æ–¥–∞ –∏ –≤—Ä–µ–º—è":
        return await weather_command(update, context)
    elif text == "üöá –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç":
        return await transport_command(update, context)
    elif text == "üèõ –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏":
        return await sights_command(update, context)
    elif text == "üìú –ò—Å—Ç–æ—Ä–∏—è –≥–æ—Ä–æ–¥–∞":
        return await history_command(update, context)
    elif text == "üé≠ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è":
        return await events_command(update, context)
    else:
        await update.message.reply_text(
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.',
            reply_markup=get_base_keyboard()
        )

async def info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:',
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    )
    return WAITING_FOR_CITY

async def process_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    city = update.message.text
    city_data = yandex_api.get_city_info(city)

    if not city_data:
        await update.message.reply_text(
            f'–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ—Ä–æ–¥–µ "{city}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.',
            reply_markup=get_base_keyboard()
        )
        return ConversationHandler.END

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    response = f"üèô –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ—Ä–æ–¥–µ {city.title()}:\n\n"
    
    response += "üèõ –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:\n"
    for sight in city_data["–¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"]:
        response += f"‚Ä¢ {sight}\n"
    
    response += "\nüçΩ –†–µ—Å—Ç–æ—Ä–∞–Ω—ã:\n"
    for restaurant in city_data["—Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã"]:
        response += f"‚Ä¢ {restaurant}\n"
    
    response += f"\nüå§ –ü–æ–≥–æ–¥–∞:\n"
    response += f"‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {city_data['–ø–æ–≥–æ–¥–∞']['—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞']}¬∞C\n"
    response += f"‚Ä¢ {city_data['–ø–æ–≥–æ–¥–∞']['–æ–ø–∏—Å–∞–Ω–∏–µ']}"

    await update.message.reply_text(
        response,
        reply_markup=get_base_keyboard()
    )
    return ConversationHandler.END

async def weather_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ –∏ –≤—Ä–µ–º–µ–Ω–∏:',
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    )
    return WAITING_FOR_CITY_WEATHER

async def process_weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    city = update.message.text
    weather_data = yandex_api.get_weather_and_time(city)

    if not weather_data:
        await update.message.reply_text(
            f'–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ—Ä–æ–¥–µ "{city}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.',
            reply_markup=get_base_keyboard()
        )
        return ConversationHandler.END

    response = f"üèô {city.title()}\n\n"
    response += f"üìÖ –î–∞—Ç–∞: {weather_data['–¥–∞—Ç–∞']}\n"
    response += f"üïê –í—Ä–µ–º—è: {weather_data['–≤—Ä–µ–º—è']}\n\n"
    response += f"üå§ –ü–æ–≥–æ–¥–∞:\n"
    response += f"‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather_data['–ø–æ–≥–æ–¥–∞']['—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞']}¬∞C\n"
    response += f"‚Ä¢ {weather_data['–ø–æ–≥–æ–¥–∞']['–æ–ø–∏—Å–∞–Ω–∏–µ']}"

    await update.message.reply_text(
        response,
        reply_markup=get_base_keyboard()
    )
    return ConversationHandler.END

async def transport_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ:',
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    )
    return WAITING_FOR_CITY_TRANSPORT

async def process_transport(update: Update, context: ContextTypes.DEFAULT_TYPE):
    city = update.message.text
    transport_data = yandex_api.get_transport_info(city)

    if not transport_data:
        await update.message.reply_text(
            f'–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ –≤ –≥–æ—Ä–æ–¥–µ "{city}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.',
            reply_markup=get_base_keyboard()
        )
        return ConversationHandler.END

    response = f"üèô –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –≤ –≥–æ—Ä–æ–¥–µ {city.title()}:\n\n"
    
    response += "üöá –ú–µ—Ç—Ä–æ:\n"
    for info in transport_data["–º–µ—Ç—Ä–æ"]:
        response += f"‚Ä¢ {info}\n"
    
    response += "\nüöå –ê–≤—Ç–æ–±—É—Å—ã:\n"
    for info in transport_data["–∞–≤—Ç–æ–±—É—Å—ã"]:
        response += f"‚Ä¢ {info}\n"
    
    response += "\nüöï –¢–∞–∫—Å–∏:\n"
    for company in transport_data["—Ç–∞–∫—Å–∏"]:
        response += f"‚Ä¢ {company}\n"

    await update.message.reply_text(
        response,
        reply_markup=get_base_keyboard()
    )
    return ConversationHandler.END

async def sights_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è—Ö:',
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    )
    return WAITING_FOR_CITY_SIGHTS

async def process_sights(update: Update, context: ContextTypes.DEFAULT_TYPE):
    city = update.message.text
    sights_data = yandex_api.get_sights_info(city)

    if not sights_data:
        await update.message.reply_text(
            f'–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è—Ö –≥–æ—Ä–æ–¥–∞ "{city}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.',
            reply_markup=get_base_keyboard()
        )
        return ConversationHandler.END

    response = f"üèõ –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≥–æ—Ä–æ–¥–∞ {city.title()}:\n\n"
    
    for sight in sights_data["–¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"]:
        response += f"üèõ {sight['–Ω–∞–∑–≤–∞–Ω–∏–µ']}\n"
        response += f"üìù {sight['–æ–ø–∏—Å–∞–Ω–∏–µ']}\n"
        response += f"üìç {sight['–∞–¥—Ä–µ—Å']}\n"
        response += f"üïí –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {sight['–≤—Ä–µ–º—è_—Ä–∞–±–æ—Ç—ã']}\n"
        response += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {sight['–≤—Ö–æ–¥']}\n\n"

    await update.message.reply_text(
        response,
        reply_markup=get_base_keyboard()
    )
    return ConversationHandler.END

async def history_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:',
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    )
    return WAITING_FOR_CITY_HISTORY

async def process_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    city = update.message.text
    history_data = yandex_api.get_history_info(city)

    if not history_data:
        await update.message.reply_text(
            f'–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ—Ä–æ–¥–µ "{city}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.',
            reply_markup=get_base_keyboard()
        )
        return ConversationHandler.END

    response = f"üìú –ò—Å—Ç–æ—Ä–∏—è –≥–æ—Ä–æ–¥–∞ {city.title()}\n\n"
    response += f"üèõ –û—Å–Ω–æ–≤–∞–Ω –≤ {history_data['–æ—Å–Ω–æ–≤–∞–Ω–∏–µ']}\n"
    response += f"üëë –û—Å–Ω–æ–≤–∞—Ç–µ–ª—å: {history_data['–æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å']}\n\n"
    
    response += "üìñ –ö—Ä–∞—Ç–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è:\n"
    for fact in history_data['–∫—Ä–∞—Ç–∫–∞—è_–∏—Å—Ç–æ—Ä–∏—è']:
        response += f"‚Ä¢ {fact}\n"
    
    response += "\nüéØ –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã:\n"
    for fact in history_data['–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ_—Ñ–∞–∫—Ç—ã']:
        response += f"‚Ä¢ {fact}\n"

    await update.message.reply_text(
        response,
        reply_markup=get_base_keyboard()
    )
    return ConversationHandler.END

async def events_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö:',
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    )
    return WAITING_FOR_CITY_EVENTS

async def process_events(update: Update, context: ContextTypes.DEFAULT_TYPE):
    city = update.message.text
    events_data = yandex_api.get_events_info(city)

    if not events_data:
        await update.message.reply_text(
            f'–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –≤ –≥–æ—Ä–æ–¥–µ "{city}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.',
            reply_markup=get_base_keyboard()
        )
        return ConversationHandler.END

    response = f"üé≠ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –≥–æ—Ä–æ–¥–µ {city.title()}\n\n"
    
    response += "üéµ –ö–æ–Ω—Ü–µ—Ä—Ç—ã:\n"
    for event in events_data['–∫–æ–Ω—Ü–µ—Ä—Ç—ã']:
        response += f"‚Ä¢ {event['–Ω–∞–∑–≤–∞–Ω–∏–µ']}\n"
        response += f"  üìç {event['–º–µ—Å—Ç–æ']}\n"
        response += f"  üìÖ {event['–¥–∞—Ç–∞']}\n"
        response += f"  üí∞ {event['—Ü–µ–Ω–∞']}\n\n"
    
    response += "üé® –í—ã—Å—Ç–∞–≤–∫–∏:\n"
    for event in events_data['–≤—ã—Å—Ç–∞–≤–∫–∏']:
        response += f"‚Ä¢ {event['–Ω–∞–∑–≤–∞–Ω–∏–µ']}\n"
        response += f"  üìç {event['–º–µ—Å—Ç–æ']}\n"
        response += f"  üìÖ {event['–¥–∞—Ç–∞']}\n"
        response += f"  üí∞ {event['—Ü–µ–Ω–∞']}\n\n"
    
    response += "üé≠ –¢–µ–∞—Ç—Ä:\n"
    for event in events_data['—Ç–µ–∞—Ç—Ä']:
        response += f"‚Ä¢ {event['–Ω–∞–∑–≤–∞–Ω–∏–µ']}\n"
        response += f"  üìç {event['–º–µ—Å—Ç–æ']}\n"
        response += f"  üìÖ {event['–¥–∞—Ç–∞']}\n"
        response += f"  üí∞ {event['—Ü–µ–Ω–∞']}\n\n"

    await update.message.reply_text(
        response,
        reply_markup=get_base_keyboard()
    )
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        '–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω.',
        reply_markup=get_base_keyboard()
    )
    return ConversationHandler.END

def main():
    application = Application.builder().token('7223528820:AAHbmSni787ovnHws_U9YTaOFhb6AkvCqoY').build()

    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('info', info_command),
            CommandHandler('weather', weather_command),
            CommandHandler('transport', transport_command),
            CommandHandler('sights', sights_command),
            CommandHandler('history', history_command),
            CommandHandler('events', events_command),
            MessageHandler(filters.Regex('^üîç –ù–∞–π—Ç–∏ –≥–æ—Ä–æ–¥$'), info_command),
            MessageHandler(filters.Regex('^üå§ –ü–æ–≥–æ–¥–∞ –∏ –≤—Ä–µ–º—è$'), weather_command),
            MessageHandler(filters.Regex('^üöá –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç$'), transport_command),
            MessageHandler(filters.Regex('^üèõ –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏$'), sights_command),
            MessageHandler(filters.Regex('^üìú –ò—Å—Ç–æ—Ä–∏—è –≥–æ—Ä–æ–¥–∞$'), history_command),
            MessageHandler(filters.Regex('^üé≠ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è$'), events_command)
        ],
        states={
            WAITING_FOR_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_city)],
            WAITING_FOR_CITY_WEATHER: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_weather)],
            WAITING_FOR_CITY_TRANSPORT: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_transport)],
            WAITING_FOR_CITY_SIGHTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_sights)],
            WAITING_FOR_CITY_HISTORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_history)],
            WAITING_FOR_CITY_EVENTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_events)]
        },
        fallbacks=[
            CommandHandler('cancel', cancel),
            MessageHandler(filters.Regex('^‚ùå –û—Ç–º–µ–Ω–∞$'), cancel)
        ]
    )

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND, 
        handle_button_press
    ))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main() 